#!/usr/bin/env bash
# Authors: Gabriel Theuws
# Translate : Gabriel Theuws
# Contact: thiagos.dasilva@gmail.com
# Contact: gaby.theuws@gmail.com
# URL origin: https://github.com/thiggy01/ubuntu-20.04-change-gdm-background
# URL translation: https://github.com/Amiralgaby/ubuntu-change-gdm-background
# =================================================================== #

usage () {
    cat << EOF
Utilisation :
  sudo $0 [OPTIONS]

OPTIONS :
  --cache-filigrane             -   Cache le logo Ubuntu sur l'écran de connexion
                                    et par la même occasion celui du boot
  --restore                     -   Restaure l'ancien thème
EOF
}

[ "$1" == "-h" ] && usage && exit 0

# Check if script is run by root.
if [ "$(id -u)" -ne 0 ] ; then
    echo 'Ce script doit être exécuté en tant que root ou avec la commande sudo.' >&2
    usage
    exit 1
fi

[ -f /etc/os-release ] && . /etc/os-release

# Check what linux distro is being used.
if ! [[ "$VERSION_CODENAME" =~ (focal|groovy) ]]; then
    echo "Désolé, ce script ne fonctionne qu'avec des distros focal ou groovy." >&2
    exit 1
fi

# Check if glib 2.0 development libraries are installed.
if [ ! -x "$(command -v glib-compile-resources)" ]; then
    echo 'Des bibliothèques glib 2.0 supplémentaires doivent être installées.' >&2
    echo "Ce script ne peut pas fonctionner sans les bibliothèques nécessaires" >&2
    echo "Besoin de du paquet \"glib-compile-resources\"" >&2
    echo "Vous n'avez peut-être pas GNOME comme gestionnaire" >&2
    exit 1
fi

# Assign the default gdm theme file path.

if [ "$NAME" == 'Ubuntu' ]; then
    gdm3Resource=/usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource
elif [ "$NAME" == 'Pop' ]; then
    gdm3Resource=/usr/share/gnome-shell/theme/Pop/gnome-shell-theme.gresource
fi

# Create a backup file of the original theme if there isn't one.
[ ! -f "$gdm3Resource"~ ] && cp "$gdm3Resource" "$gdm3Resource~"

# Restore backup function.
restore () {
    if mv "$gdm3Resource~" "$gdm3Resource"; then
        chmod 644 "$gdm3Resource"
        echo 'Le fond GDM a été restauré avec succès.'
        exit 0
    fi
}

# Restore the original gdm3 theme.
[ "$1" == "--restore" ] && restore

#Define main variables.
gdm3xml=$(basename "$gdm3Resource").xml
workDir="/tmp/gdm3-theme"

# Create directories from resource list.
CreateDirs() {
    for resource in $(gresource list "$gdm3Resource~"); do
        resource="${resource#\/org\/gnome\/shell\/}"
        if [ ! -d "$workDir"/"${resource%/*}" ]; then
            mkdir -p "$workDir"/"${resource%/*}"
        fi
    done
}

# Extract resources from binary file.
ExtractRes() {
    for resource in $(gresource list "$gdm3Resource~"); do
        gresource extract "$gdm3Resource~" "$resource" > \
            "$workDir"/"${resource#\/org\/gnome\/shell\/}"
    done
}

# Compile resources into a gresource binary file.
CompileMoveRes() {

    glib-compile-resources --sourcedir=$workDir/theme/ $workDir/theme/"$gdm3xml"

    # Move the generated binary file to the gnome-shell folder.

    if mv $workDir/theme/gnome-shell-theme.gresource $gdm3Resource; then
        # Solve a permission change issue (thanks to @huepf from github).
        chmod 644 "$gdm3Resource"
        echo "L'arrière-plan de l'écran de connexion a changé avec succès."
    else
        # If something went wrong, restore backup file.
        echo "quelque chose s'est mal passé." >&2
        restore
        echo "Aucun changement n'a été appliqué" >&2
    fi

    # Remove temporary directories and files.
    rm -r "$workDir"
    exit 0
}

runApp() {

# Test if argument is an image file.
if [[ $(file --mime-type -b "$1") == image/*g ]]; then

    # Define image variables.
    gdmBgImg=$(realpath "$1")
    imgFile=$(basename "$gdmBgImg")

    # Call procedures to create directories and extract resources to them.
    CreateDirs

    ExtractRes

    # Copy selected image to the resources directory.
    cp "$gdmBgImg" "$workDir"/theme

    # Change gdm background to the image you submited.
    oldBg="#lockDialogGroup \{.*?\}"
    newBg="#lockDialogGroup {
        background: url('resource:\/\/\/org\/gnome\/shell\/theme\/$imgFile');
    background-size: cover; }"
    perl -i -0777 -pe "s/$oldBg/$newBg/s" "$workDir"/theme/gdm3.css

    # Generate gresource xml file.
    echo '<?xml version="1.0" encoding="UTF-8"?>
<gresources>
    <gresource prefix="/org/gnome/shell/theme">' > "$workDir"/theme/"$gdm3xml"
    for file in $(gresource list "$gdm3Resource~"); do
        echo "        <file>${file#\/org\/gnome/shell\/theme\/}</file>" \
            >> "$workDir"/theme/"$gdm3xml"
    done
    echo "        <file>$imgFile</file>" >> "$workDir"/theme/"$gdm3xml"
    echo '    </gresource>
    </gresources>' >> "$workDir"/theme/"$gdm3xml"

    # Compile and move gresource.
    CompileMoveRes

else
    echo -e "\nL'image n'a pas été trouvée ou vous avez renseigné un mauvais code hexadécimal" >&2
    echo "S'il vous plaît, donnez un chemin vers une image .jpg ou .png ou un code hexadécimal valide" >&2
fi
}

PATH_TO_IMG="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"/image

if nc -zw1 picsum.photos 443
then 
    echo "Connexion active" 
    wget --no-verbose https://picsum.photos/1600/900 -6 -O "$PATH_TO_IMG"
else
    echo "Problème pour se connecter" >&2
fi

[ -f "$PATH_TO_IMG" ] && runApp "$PATH_TO_IMG" || echo "Le fichier \"$PATH_TO_IMG\" n'a pas été trouvé"
